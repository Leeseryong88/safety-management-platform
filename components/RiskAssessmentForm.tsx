
import React, { useState, useEffect } from 'react';
import UploadDropZone from './UploadDropZone';
import { HazardItem, RiskAssessment } from '../types';
import { PlusCircleIcon, TrashIcon } from './Icons';
import { v4 as uuidv4 } from 'uuid';
import Spinner from './Spinner';


interface RiskAssessmentFormProps {
  onSubmit: (
    assessmentData: Omit<RiskAssessment, 'id' | 'userId' | 'createdAt' | 'photos'> & { hazards?: HazardItem[] },
    files: File[]
  ) => void;
  initialData?: Partial<RiskAssessment>; 
  isLoading: boolean;
  mode: 'create' | 'edit';
}

const RiskAssessmentForm: React.FC<RiskAssessmentFormProps> = ({ onSubmit, initialData, isLoading, mode }) => {
  const [title, setTitle] = useState('');
  const [processName, setProcessName] = useState('');
  const [files, setFiles] = useState<File[]>([]);
  const [hazards, setHazards] = useState<HazardItem[]>([]);
  const [adminComment, setAdminComment] = useState('');

  useEffect(() => {
    if (mode === 'edit' && initialData) {
      setTitle(initialData.title || '');
      setProcessName(initialData.processName || '');
      setHazards(initialData.hazards?.map(h => ({ ...h, id: h.id || uuidv4() })) || []);
      setAdminComment(initialData.adminComment || '');
      setFiles([]); // Clear staged files from 'create' mode if any
    } else if (mode === 'create') {
      setTitle(initialData?.title || ''); // Allow pre-fill if coming from a retry scenario
      setProcessName(initialData?.processName || '');
      setFiles([]);
      setHazards([]); // Hazards will be generated by AI after this form submission
      setAdminComment(''); // Admin comment will be added in a subsequent edit step
    }
  }, [initialData, mode]);

  const handleFileChange = (file: File | null) => {
    if (file) {
      setFiles(prevFiles => [...prevFiles, file]);
    }
  };

  const removeFile = (index: number) => {
    setFiles(prevFiles => prevFiles.filter((_, i) => i !== index));
  };

  const addHazard = () => {
    setHazards([...hazards, { id: uuidv4(), description: '', severity: 3, likelihood: 3, countermeasures: '' }]);
  };

  const updateHazard = (index: number, field: keyof HazardItem, value: string | number) => {
    const newHazards = [...hazards];
    if ((field === 'severity' || field === 'likelihood') && typeof value === 'string') {
        const numValue = parseInt(value, 10);
        newHazards[index] = { ...newHazards[index], [field]: Math.max(1, Math.min(5, numValue)) };
    } else {
        newHazards[index] = { ...newHazards[index], [field]: value };
    }
    setHazards(newHazards);
  };

  const removeHazard = (index: number) => {
    setHazards(hazards.filter((_, i) => i !== index));
  };

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    if (mode === 'create' && files.length === 0) {
        alert("AI 평가를 위해 하나 이상의 이미지를 업로드해주세요.");
        return;
    }
    // In 'create' mode, hazards and adminComment are empty, AI will populate hazards later.
    // In 'edit' mode, hazards and adminComment are taken from the form state.
    onSubmit({ title, processName, hazards: mode === 'edit' ? hazards : [], adminComment: mode === 'edit' ? adminComment : '' }, files);
  };
  
  return (
    <form onSubmit={handleSubmit} className="space-y-6 bg-white p-6 rounded-lg shadow-md">
      <div>
        <label htmlFor="title" className="block text-sm font-medium text-gray-700">평가 제목</label>
        <input
          type="text"
          id="title"
          value={title}
          onChange={(e) => setTitle(e.target.value)}
          required
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
          placeholder="예: 용접 구역 안전 점검"
        />
      </div>
      <div>
        <label htmlFor="processName" className="block text-sm font-medium text-gray-700">공정 또는 장비명</label>
        <input
          type="text"
          id="processName"
          value={processName}
          onChange={(e) => setProcessName(e.target.value)}
          required
          className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
          placeholder="예: 아크 용접기 XYZ-2000"
        />
      </div>

      <UploadDropZone onFileChange={handleFileChange} label={mode === 'edit' && (initialData?.photos?.length || 0 > 0) ? "추가 이미지 업로드 (선택 사항)" : "관련 이미지 업로드 (필수)"} />
      
      {files.length > 0 && (
        <div className="mt-2 space-y-1">
          <p className="text-sm font-medium text-gray-700">이번 세션에 업로드된 파일:</p>
          {files.map((f, idx) => (
            <div key={idx} className="flex items-center justify-between text-sm text-gray-600 bg-gray-50 p-1 rounded">
              <span>{f.name} ({(f.size / 1024).toFixed(1)} KB)</span>
              <button type="button" onClick={() => removeFile(idx)} className="text-red-500 hover:text-red-700">
                <TrashIcon className="w-4 h-4" />
              </button>
            </div>
          ))}
        </div>
      )}

      {mode === 'edit' && initialData?.photos && initialData.photos.length > 0 && (
         <div className="mt-2 space-y-1">
          <p className="text-sm font-medium text-gray-700">이전에 업로드된 이미지:</p>
          {initialData.photos.map((photo, idx) => (
            <div key={idx} className="text-sm text-gray-600 bg-gray-50 p-1 rounded">
              <a href={photo.url} target="_blank" rel="noopener noreferrer" className="hover:underline">{photo.name}</a>
            </div>
          ))}
        </div>       
      )}

      {mode === 'edit' && (
        <>
          <div className="space-y-4">
            <h3 className="text-lg font-medium text-gray-900">식별된 위험 요인 (편집 가능)</h3>
            {hazards.map((hazard, index) => (
              <div key={hazard.id} className="p-4 border border-gray-200 rounded-md space-y-3 bg-gray-50 relative">
                <button
                  type="button"
                  onClick={() => removeHazard(index)}
                  className="absolute top-2 right-2 text-red-500 hover:text-red-700"
                  title="위험 요인 제거"
                >
                  <TrashIcon className="w-5 h-5" />
                </button>
                <div>
                  <label htmlFor={`hazard-desc-${index}`} className="block text-sm font-medium text-gray-700">설명</label>
                  <textarea
                    id={`hazard-desc-${index}`}
                    rows={2}
                    value={hazard.description}
                    onChange={(e) => updateHazard(index, 'description', e.target.value)}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
                  />
                </div>
                <div className="grid grid-cols-1 sm:grid-cols-2 gap-4">
                  <div>
                    <label htmlFor={`hazard-severity-${index}`} className="block text-sm font-medium text-gray-700">심각도 (1-5)</label>
                    <input
                      type="number"
                      id={`hazard-severity-${index}`}
                      min="1" max="5"
                      value={hazard.severity}
                      onChange={(e) => updateHazard(index, 'severity', parseInt(e.target.value,10))}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
                    />
                  </div>
                  <div>
                    <label htmlFor={`hazard-likelihood-${index}`} className="block text-sm font-medium text-gray-700">가능성 (1-5)</label>
                    <input
                      type="number"
                      id={`hazard-likelihood-${index}`}
                      min="1" max="5"
                      value={hazard.likelihood}
                      onChange={(e) => updateHazard(index, 'likelihood', parseInt(e.target.value,10))}
                      className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
                    />
                  </div>
                </div>
                <div>
                  <label htmlFor={`hazard-countermeasures-${index}`} className="block text-sm font-medium text-gray-700">대응책</label>
                  <textarea
                    id={`hazard-countermeasures-${index}`}
                    rows={2}
                    value={hazard.countermeasures}
                    onChange={(e) => updateHazard(index, 'countermeasures', e.target.value)}
                    className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
                  />
                </div>
              </div>
            ))}
            <button
              type="button"
              onClick={addHazard}
              className="flex items-center text-sm text-primary-600 hover:text-primary-800 font-medium"
            >
              <PlusCircleIcon className="w-5 h-5 mr-1" />
              위험 요인 수동 추가
            </button>
          </div>

          <div>
            <label htmlFor="adminComment" className="block text-sm font-medium text-gray-700">관리자/검토자 의견</label>
            <textarea
              id="adminComment"
              rows={3}
              value={adminComment}
              onChange={(e) => setAdminComment(e.target.value)}
              className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-primary-500 focus:ring-primary-500 sm:text-sm p-2"
              placeholder="전체적인 의견이나 관찰 내용을 여기에 입력하세요..."
            />
          </div>
        </>
      )}

      <button
        type="submit"
        disabled={isLoading}
        className="w-full flex items-center justify-center px-6 py-3 border border-transparent text-base font-medium rounded-md shadow-sm text-white bg-primary-600 hover:bg-primary-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-primary-500 disabled:bg-gray-300"
      >
        {isLoading && <Spinner size="sm" color="text-white" />}
        <span className="ml-2">{mode === 'edit' ? '평가 업데이트' : 'AI로 초기 평가 생성'}</span>
      </button>
    </form>
  );
};

export default RiskAssessmentForm;
